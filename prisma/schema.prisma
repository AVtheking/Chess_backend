// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  username    String   @unique
  email       String   @unique
  password    String
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  gameAsWhite Game[]   @relation("GameAsWhite")
  gameAsBlack Game[]   @relation("GameAsBlack")

  @@index([email, username, id])
  @@map("users")
}

model Otp {
  id        String   @id @default(cuid())
  otp       Int
  email     String   @unique
  createdAt DateTime @default(now())

  @@index([id, email])
  @@map("otps")
}

model Game {
  id            String      @id @default(cuid())
  whitePlayerId String
  blackPlayerId String
  whitePlayer   User        @relation("GameAsWhite", fields: [whitePlayerId], references: [id])
  blackPlayer   User        @relation("GameAsBlack", fields: [blackPlayerId], references: [id])
  moves         Move[]
  result        GameResult?
  status        GameStatus
  startingFen   String      @default("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1")
  createdAt     DateTime    @default(now())

  @@index([whitePlayerId, blackPlayerId, id])
  @@map("games")
}

model Move {
  id        String   @id @default(cuid())
  gameId    String
  game      Game     @relation(fields: [gameId], references: [id])
  from      String
  to        String
  startFen  String
  endFen    String
  createdAt DateTime @default(now())

  @@index([gameId, id])
}

enum GameStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum GameResult {
  WHITE_WON
  BLACK_WON
  DRAW
}
